//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SCTechWebService.electrodatallc.dnn {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://webservices.DotNetNuke.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BaseEntityInfo))]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddFolderAjaxOperationCompleted;
        
        private IWebAuthendicationHeader iWebAuthendicationHeaderValueField;
        
        private System.Threading.SendOrPostCallback AddFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyFileAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DefaultProtectedFoldersAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback DefaultProtectedFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFilesAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilesByFolderAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilesByFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileByIdAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFoldersByParentAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFoldersByParentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderByIdAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxRequestLengthAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxRequestLengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortalRootFoldersAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortalRootFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortalSpaceUsedAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortalSpaceUsedOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileAjaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnEncryptDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback PortalsOnServerOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::SCTechWebService.Properties.Settings.Default.SCTVWebService_electrodatallc_dnn_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public IWebAuthendicationHeader IWebAuthendicationHeaderValue {
            get {
                return this.iWebAuthendicationHeaderValueField;
            }
            set {
                this.iWebAuthendicationHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddFolderAjaxCompletedEventHandler AddFolderAjaxCompleted;
        
        /// <remarks/>
        public event AddFolderCompletedEventHandler AddFolderCompleted;
        
        /// <remarks/>
        public event CopyFileAjaxCompletedEventHandler CopyFileAjaxCompleted;
        
        /// <remarks/>
        public event CopyFileCompletedEventHandler CopyFileCompleted;
        
        /// <remarks/>
        public event DefaultProtectedFoldersAjaxCompletedEventHandler DefaultProtectedFoldersAjaxCompleted;
        
        /// <remarks/>
        public event DefaultProtectedFoldersCompletedEventHandler DefaultProtectedFoldersCompleted;
        
        /// <remarks/>
        public event DeleteFilesAjaxCompletedEventHandler DeleteFilesAjaxCompleted;
        
        /// <remarks/>
        public event DeleteFilesCompletedEventHandler DeleteFilesCompleted;
        
        /// <remarks/>
        public event DownloadFileAjaxCompletedEventHandler DownloadFileAjaxCompleted;
        
        /// <remarks/>
        public event DownloadFileCompletedEventHandler DownloadFileCompleted;
        
        /// <remarks/>
        public event GetFilesByFolderAjaxCompletedEventHandler GetFilesByFolderAjaxCompleted;
        
        /// <remarks/>
        public event GetFilesByFolderCompletedEventHandler GetFilesByFolderCompleted;
        
        /// <remarks/>
        public event GetFileByIdAjaxCompletedEventHandler GetFileByIdAjaxCompleted;
        
        /// <remarks/>
        public event GetFileByIdCompletedEventHandler GetFileByIdCompleted;
        
        /// <remarks/>
        public event GetFoldersByParentAjaxCompletedEventHandler GetFoldersByParentAjaxCompleted;
        
        /// <remarks/>
        public event GetFoldersByParentCompletedEventHandler GetFoldersByParentCompleted;
        
        /// <remarks/>
        public event GetFolderByIdAjaxCompletedEventHandler GetFolderByIdAjaxCompleted;
        
        /// <remarks/>
        public event GetFolderByIdCompletedEventHandler GetFolderByIdCompleted;
        
        /// <remarks/>
        public event GetMaxRequestLengthAjaxCompletedEventHandler GetMaxRequestLengthAjaxCompleted;
        
        /// <remarks/>
        public event GetMaxRequestLengthCompletedEventHandler GetMaxRequestLengthCompleted;
        
        /// <remarks/>
        public event GetPortalRootFoldersAjaxCompletedEventHandler GetPortalRootFoldersAjaxCompleted;
        
        /// <remarks/>
        public event GetPortalRootFoldersCompletedEventHandler GetPortalRootFoldersCompleted;
        
        /// <remarks/>
        public event GetPortalSpaceUsedAjaxCompletedEventHandler GetPortalSpaceUsedAjaxCompleted;
        
        /// <remarks/>
        public event GetPortalSpaceUsedCompletedEventHandler GetPortalSpaceUsedCompleted;
        
        /// <remarks/>
        public event UploadFileAjaxCompletedEventHandler UploadFileAjaxCompleted;
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event GetVersionCompletedEventHandler GetVersionCompleted;
        
        /// <remarks/>
        public event EncryptDataCompletedEventHandler EncryptDataCompleted;
        
        /// <remarks/>
        public event UnEncryptDataCompletedEventHandler UnEncryptDataCompleted;
        
        /// <remarks/>
        public event GetUserCompletedEventHandler GetUserCompleted;
        
        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;
        
        /// <remarks/>
        public event PortalsOnServerCompletedEventHandler PortalsOnServerCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/AddFolderAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddFolderAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int parentFolderId, string newFolderName) {
            this.Invoke("AddFolderAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        parentFolderId,
                        newFolderName});
        }
        
        /// <remarks/>
        public void AddFolderAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int parentFolderId, string newFolderName) {
            this.AddFolderAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, parentFolderId, newFolderName, null);
        }
        
        /// <remarks/>
        public void AddFolderAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int parentFolderId, string newFolderName, object userState) {
            if ((this.AddFolderAjaxOperationCompleted == null)) {
                this.AddFolderAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolderAjaxOperationCompleted);
            }
            this.InvokeAsync("AddFolderAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        parentFolderId,
                        newFolderName}, this.AddFolderAjaxOperationCompleted, userState);
        }
        
        private void OnAddFolderAjaxOperationCompleted(object arg) {
            if ((this.AddFolderAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolderAjaxCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/AddFolder", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddFolder(int folderId, string newFolderName) {
            this.Invoke("AddFolder", new object[] {
                        folderId,
                        newFolderName});
        }
        
        /// <remarks/>
        public void AddFolderAsync(int folderId, string newFolderName) {
            this.AddFolderAsync(folderId, newFolderName, null);
        }
        
        /// <remarks/>
        public void AddFolderAsync(int folderId, string newFolderName, object userState) {
            if ((this.AddFolderOperationCompleted == null)) {
                this.AddFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolderOperationCompleted);
            }
            this.InvokeAsync("AddFolder", new object[] {
                        folderId,
                        newFolderName}, this.AddFolderOperationCompleted, userState);
        }
        
        private void OnAddFolderOperationCompleted(object arg) {
            if ((this.AddFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/CopyFileAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CopyFileAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int sourceFileID, int destFolderId, string destFileName) {
            object[] results = this.Invoke("CopyFileAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        sourceFileID,
                        destFolderId,
                        destFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CopyFileAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int sourceFileID, int destFolderId, string destFileName) {
            this.CopyFileAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, sourceFileID, destFolderId, destFileName, null);
        }
        
        /// <remarks/>
        public void CopyFileAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int sourceFileID, int destFolderId, string destFileName, object userState) {
            if ((this.CopyFileAjaxOperationCompleted == null)) {
                this.CopyFileAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyFileAjaxOperationCompleted);
            }
            this.InvokeAsync("CopyFileAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        sourceFileID,
                        destFolderId,
                        destFileName}, this.CopyFileAjaxOperationCompleted, userState);
        }
        
        private void OnCopyFileAjaxOperationCompleted(object arg) {
            if ((this.CopyFileAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyFileAjaxCompleted(this, new CopyFileAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/CopyFile", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CopyFile(int sourceFileID, int destFolderId, string destFileName) {
            object[] results = this.Invoke("CopyFile", new object[] {
                        sourceFileID,
                        destFolderId,
                        destFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CopyFileAsync(int sourceFileID, int destFolderId, string destFileName) {
            this.CopyFileAsync(sourceFileID, destFolderId, destFileName, null);
        }
        
        /// <remarks/>
        public void CopyFileAsync(int sourceFileID, int destFolderId, string destFileName, object userState) {
            if ((this.CopyFileOperationCompleted == null)) {
                this.CopyFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyFileOperationCompleted);
            }
            this.InvokeAsync("CopyFile", new object[] {
                        sourceFileID,
                        destFolderId,
                        destFileName}, this.CopyFileOperationCompleted, userState);
        }
        
        private void OnCopyFileOperationCompleted(object arg) {
            if ((this.CopyFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyFileCompleted(this, new CopyFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/DefaultProtectedFoldersAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DefaultProtectedFoldersAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId) {
            object[] results = this.Invoke("DefaultProtectedFoldersAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        folderId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DefaultProtectedFoldersAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId) {
            this.DefaultProtectedFoldersAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, folderId, null);
        }
        
        /// <remarks/>
        public void DefaultProtectedFoldersAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId, object userState) {
            if ((this.DefaultProtectedFoldersAjaxOperationCompleted == null)) {
                this.DefaultProtectedFoldersAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDefaultProtectedFoldersAjaxOperationCompleted);
            }
            this.InvokeAsync("DefaultProtectedFoldersAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        folderId}, this.DefaultProtectedFoldersAjaxOperationCompleted, userState);
        }
        
        private void OnDefaultProtectedFoldersAjaxOperationCompleted(object arg) {
            if ((this.DefaultProtectedFoldersAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DefaultProtectedFoldersAjaxCompleted(this, new DefaultProtectedFoldersAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/DefaultProtectedFolders", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DefaultProtectedFolders(int folderId) {
            object[] results = this.Invoke("DefaultProtectedFolders", new object[] {
                        folderId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DefaultProtectedFoldersAsync(int folderId) {
            this.DefaultProtectedFoldersAsync(folderId, null);
        }
        
        /// <remarks/>
        public void DefaultProtectedFoldersAsync(int folderId, object userState) {
            if ((this.DefaultProtectedFoldersOperationCompleted == null)) {
                this.DefaultProtectedFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDefaultProtectedFoldersOperationCompleted);
            }
            this.InvokeAsync("DefaultProtectedFolders", new object[] {
                        folderId}, this.DefaultProtectedFoldersOperationCompleted, userState);
        }
        
        private void OnDefaultProtectedFoldersOperationCompleted(object arg) {
            if ((this.DefaultProtectedFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DefaultProtectedFoldersCompleted(this, new DefaultProtectedFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/DeleteFilesAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteFilesAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int[] files) {
            object[] results = this.Invoke("DeleteFilesAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        files});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFilesAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int[] files) {
            this.DeleteFilesAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, files, null);
        }
        
        /// <remarks/>
        public void DeleteFilesAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int[] files, object userState) {
            if ((this.DeleteFilesAjaxOperationCompleted == null)) {
                this.DeleteFilesAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFilesAjaxOperationCompleted);
            }
            this.InvokeAsync("DeleteFilesAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        files}, this.DeleteFilesAjaxOperationCompleted, userState);
        }
        
        private void OnDeleteFilesAjaxOperationCompleted(object arg) {
            if ((this.DeleteFilesAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFilesAjaxCompleted(this, new DeleteFilesAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/DeleteFiles", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteFiles(int[] files) {
            object[] results = this.Invoke("DeleteFiles", new object[] {
                        files});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFilesAsync(int[] files) {
            this.DeleteFilesAsync(files, null);
        }
        
        /// <remarks/>
        public void DeleteFilesAsync(int[] files, object userState) {
            if ((this.DeleteFilesOperationCompleted == null)) {
                this.DeleteFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFilesOperationCompleted);
            }
            this.InvokeAsync("DeleteFiles", new object[] {
                        files}, this.DeleteFilesOperationCompleted, userState);
        }
        
        private void OnDeleteFilesOperationCompleted(object arg) {
            if ((this.DeleteFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFilesCompleted(this, new DeleteFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/DownloadFileAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFileAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int fileId) {
            object[] results = this.Invoke("DownloadFileAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        fileId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int fileId) {
            this.DownloadFileAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, fileId, null);
        }
        
        /// <remarks/>
        public void DownloadFileAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int fileId, object userState) {
            if ((this.DownloadFileAjaxOperationCompleted == null)) {
                this.DownloadFileAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileAjaxOperationCompleted);
            }
            this.InvokeAsync("DownloadFileAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        fileId}, this.DownloadFileAjaxOperationCompleted, userState);
        }
        
        private void OnDownloadFileAjaxOperationCompleted(object arg) {
            if ((this.DownloadFileAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileAjaxCompleted(this, new DownloadFileAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/DownloadFile", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFile(int fileId) {
            object[] results = this.Invoke("DownloadFile", new object[] {
                        fileId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileAsync(int fileId) {
            this.DownloadFileAsync(fileId, null);
        }
        
        /// <remarks/>
        public void DownloadFileAsync(int fileId, object userState) {
            if ((this.DownloadFileOperationCompleted == null)) {
                this.DownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileOperationCompleted);
            }
            this.InvokeAsync("DownloadFile", new object[] {
                        fileId}, this.DownloadFileOperationCompleted, userState);
        }
        
        private void OnDownloadFileOperationCompleted(object arg) {
            if ((this.DownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetFilesByFolderAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFileInfo[] GetFilesByFolderAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId) {
            object[] results = this.Invoke("GetFilesByFolderAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        folderId});
            return ((IWebFileInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilesByFolderAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId) {
            this.GetFilesByFolderAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, folderId, null);
        }
        
        /// <remarks/>
        public void GetFilesByFolderAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId, object userState) {
            if ((this.GetFilesByFolderAjaxOperationCompleted == null)) {
                this.GetFilesByFolderAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesByFolderAjaxOperationCompleted);
            }
            this.InvokeAsync("GetFilesByFolderAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        folderId}, this.GetFilesByFolderAjaxOperationCompleted, userState);
        }
        
        private void OnGetFilesByFolderAjaxOperationCompleted(object arg) {
            if ((this.GetFilesByFolderAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesByFolderAjaxCompleted(this, new GetFilesByFolderAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetFilesByFolder", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFileInfo[] GetFilesByFolder(int folderId) {
            object[] results = this.Invoke("GetFilesByFolder", new object[] {
                        folderId});
            return ((IWebFileInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilesByFolderAsync(int folderId) {
            this.GetFilesByFolderAsync(folderId, null);
        }
        
        /// <remarks/>
        public void GetFilesByFolderAsync(int folderId, object userState) {
            if ((this.GetFilesByFolderOperationCompleted == null)) {
                this.GetFilesByFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesByFolderOperationCompleted);
            }
            this.InvokeAsync("GetFilesByFolder", new object[] {
                        folderId}, this.GetFilesByFolderOperationCompleted, userState);
        }
        
        private void OnGetFilesByFolderOperationCompleted(object arg) {
            if ((this.GetFilesByFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesByFolderCompleted(this, new GetFilesByFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetFileByIdAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFileInfo GetFileByIdAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int fileId) {
            object[] results = this.Invoke("GetFileByIdAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        fileId});
            return ((IWebFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileByIdAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int fileId) {
            this.GetFileByIdAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, fileId, null);
        }
        
        /// <remarks/>
        public void GetFileByIdAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int fileId, object userState) {
            if ((this.GetFileByIdAjaxOperationCompleted == null)) {
                this.GetFileByIdAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileByIdAjaxOperationCompleted);
            }
            this.InvokeAsync("GetFileByIdAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        fileId}, this.GetFileByIdAjaxOperationCompleted, userState);
        }
        
        private void OnGetFileByIdAjaxOperationCompleted(object arg) {
            if ((this.GetFileByIdAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileByIdAjaxCompleted(this, new GetFileByIdAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetFileById", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFileInfo GetFileById(int fileId) {
            object[] results = this.Invoke("GetFileById", new object[] {
                        fileId});
            return ((IWebFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileByIdAsync(int fileId) {
            this.GetFileByIdAsync(fileId, null);
        }
        
        /// <remarks/>
        public void GetFileByIdAsync(int fileId, object userState) {
            if ((this.GetFileByIdOperationCompleted == null)) {
                this.GetFileByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileByIdOperationCompleted);
            }
            this.InvokeAsync("GetFileById", new object[] {
                        fileId}, this.GetFileByIdOperationCompleted, userState);
        }
        
        private void OnGetFileByIdOperationCompleted(object arg) {
            if ((this.GetFileByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileByIdCompleted(this, new GetFileByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetFoldersByParentAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFolderInfo[] GetFoldersByParentAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int parentFolderId) {
            object[] results = this.Invoke("GetFoldersByParentAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        parentFolderId});
            return ((IWebFolderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFoldersByParentAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int parentFolderId) {
            this.GetFoldersByParentAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, parentFolderId, null);
        }
        
        /// <remarks/>
        public void GetFoldersByParentAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int parentFolderId, object userState) {
            if ((this.GetFoldersByParentAjaxOperationCompleted == null)) {
                this.GetFoldersByParentAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersByParentAjaxOperationCompleted);
            }
            this.InvokeAsync("GetFoldersByParentAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        parentFolderId}, this.GetFoldersByParentAjaxOperationCompleted, userState);
        }
        
        private void OnGetFoldersByParentAjaxOperationCompleted(object arg) {
            if ((this.GetFoldersByParentAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersByParentAjaxCompleted(this, new GetFoldersByParentAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetFoldersByParent", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFolderInfo[] GetFoldersByParent(int parentFolderId) {
            object[] results = this.Invoke("GetFoldersByParent", new object[] {
                        parentFolderId});
            return ((IWebFolderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFoldersByParentAsync(int parentFolderId) {
            this.GetFoldersByParentAsync(parentFolderId, null);
        }
        
        /// <remarks/>
        public void GetFoldersByParentAsync(int parentFolderId, object userState) {
            if ((this.GetFoldersByParentOperationCompleted == null)) {
                this.GetFoldersByParentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersByParentOperationCompleted);
            }
            this.InvokeAsync("GetFoldersByParent", new object[] {
                        parentFolderId}, this.GetFoldersByParentOperationCompleted, userState);
        }
        
        private void OnGetFoldersByParentOperationCompleted(object arg) {
            if ((this.GetFoldersByParentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersByParentCompleted(this, new GetFoldersByParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetFolderByIdAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFolderInfo GetFolderByIdAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId) {
            object[] results = this.Invoke("GetFolderByIdAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        folderId});
            return ((IWebFolderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderByIdAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId) {
            this.GetFolderByIdAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, folderId, null);
        }
        
        /// <remarks/>
        public void GetFolderByIdAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId, object userState) {
            if ((this.GetFolderByIdAjaxOperationCompleted == null)) {
                this.GetFolderByIdAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderByIdAjaxOperationCompleted);
            }
            this.InvokeAsync("GetFolderByIdAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        folderId}, this.GetFolderByIdAjaxOperationCompleted, userState);
        }
        
        private void OnGetFolderByIdAjaxOperationCompleted(object arg) {
            if ((this.GetFolderByIdAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderByIdAjaxCompleted(this, new GetFolderByIdAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetFolderById", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFolderInfo GetFolderById(int folderId) {
            object[] results = this.Invoke("GetFolderById", new object[] {
                        folderId});
            return ((IWebFolderInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderByIdAsync(int folderId) {
            this.GetFolderByIdAsync(folderId, null);
        }
        
        /// <remarks/>
        public void GetFolderByIdAsync(int folderId, object userState) {
            if ((this.GetFolderByIdOperationCompleted == null)) {
                this.GetFolderByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderByIdOperationCompleted);
            }
            this.InvokeAsync("GetFolderById", new object[] {
                        folderId}, this.GetFolderByIdOperationCompleted, userState);
        }
        
        private void OnGetFolderByIdOperationCompleted(object arg) {
            if ((this.GetFolderByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderByIdCompleted(this, new GetFolderByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetMaxRequestLengthAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetMaxRequestLengthAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted) {
            object[] results = this.Invoke("GetMaxRequestLengthAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxRequestLengthAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted) {
            this.GetMaxRequestLengthAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, null);
        }
        
        /// <remarks/>
        public void GetMaxRequestLengthAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, object userState) {
            if ((this.GetMaxRequestLengthAjaxOperationCompleted == null)) {
                this.GetMaxRequestLengthAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxRequestLengthAjaxOperationCompleted);
            }
            this.InvokeAsync("GetMaxRequestLengthAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted}, this.GetMaxRequestLengthAjaxOperationCompleted, userState);
        }
        
        private void OnGetMaxRequestLengthAjaxOperationCompleted(object arg) {
            if ((this.GetMaxRequestLengthAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxRequestLengthAjaxCompleted(this, new GetMaxRequestLengthAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetMaxRequestLength", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetMaxRequestLength() {
            object[] results = this.Invoke("GetMaxRequestLength", new object[0]);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxRequestLengthAsync() {
            this.GetMaxRequestLengthAsync(null);
        }
        
        /// <remarks/>
        public void GetMaxRequestLengthAsync(object userState) {
            if ((this.GetMaxRequestLengthOperationCompleted == null)) {
                this.GetMaxRequestLengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxRequestLengthOperationCompleted);
            }
            this.InvokeAsync("GetMaxRequestLength", new object[0], this.GetMaxRequestLengthOperationCompleted, userState);
        }
        
        private void OnGetMaxRequestLengthOperationCompleted(object arg) {
            if ((this.GetMaxRequestLengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxRequestLengthCompleted(this, new GetMaxRequestLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetPortalRootFoldersAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFolderInfo[] GetPortalRootFoldersAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted) {
            object[] results = this.Invoke("GetPortalRootFoldersAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted});
            return ((IWebFolderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPortalRootFoldersAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted) {
            this.GetPortalRootFoldersAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, null);
        }
        
        /// <remarks/>
        public void GetPortalRootFoldersAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, object userState) {
            if ((this.GetPortalRootFoldersAjaxOperationCompleted == null)) {
                this.GetPortalRootFoldersAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortalRootFoldersAjaxOperationCompleted);
            }
            this.InvokeAsync("GetPortalRootFoldersAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted}, this.GetPortalRootFoldersAjaxOperationCompleted, userState);
        }
        
        private void OnGetPortalRootFoldersAjaxOperationCompleted(object arg) {
            if ((this.GetPortalRootFoldersAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortalRootFoldersAjaxCompleted(this, new GetPortalRootFoldersAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetPortalRootFolders", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IWebFolderInfo[] GetPortalRootFolders() {
            object[] results = this.Invoke("GetPortalRootFolders", new object[0]);
            return ((IWebFolderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPortalRootFoldersAsync() {
            this.GetPortalRootFoldersAsync(null);
        }
        
        /// <remarks/>
        public void GetPortalRootFoldersAsync(object userState) {
            if ((this.GetPortalRootFoldersOperationCompleted == null)) {
                this.GetPortalRootFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortalRootFoldersOperationCompleted);
            }
            this.InvokeAsync("GetPortalRootFolders", new object[0], this.GetPortalRootFoldersOperationCompleted, userState);
        }
        
        private void OnGetPortalRootFoldersOperationCompleted(object arg) {
            if ((this.GetPortalRootFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortalRootFoldersCompleted(this, new GetPortalRootFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetPortalSpaceUsedAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPortalSpaceUsedAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, bool showQuota) {
            object[] results = this.Invoke("GetPortalSpaceUsedAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        showQuota});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPortalSpaceUsedAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, bool showQuota) {
            this.GetPortalSpaceUsedAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, showQuota, null);
        }
        
        /// <remarks/>
        public void GetPortalSpaceUsedAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, bool showQuota, object userState) {
            if ((this.GetPortalSpaceUsedAjaxOperationCompleted == null)) {
                this.GetPortalSpaceUsedAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortalSpaceUsedAjaxOperationCompleted);
            }
            this.InvokeAsync("GetPortalSpaceUsedAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        showQuota}, this.GetPortalSpaceUsedAjaxOperationCompleted, userState);
        }
        
        private void OnGetPortalSpaceUsedAjaxOperationCompleted(object arg) {
            if ((this.GetPortalSpaceUsedAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortalSpaceUsedAjaxCompleted(this, new GetPortalSpaceUsedAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetPortalSpaceUsed", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPortalSpaceUsed(bool showQuota) {
            object[] results = this.Invoke("GetPortalSpaceUsed", new object[] {
                        showQuota});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPortalSpaceUsedAsync(bool showQuota) {
            this.GetPortalSpaceUsedAsync(showQuota, null);
        }
        
        /// <remarks/>
        public void GetPortalSpaceUsedAsync(bool showQuota, object userState) {
            if ((this.GetPortalSpaceUsedOperationCompleted == null)) {
                this.GetPortalSpaceUsedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortalSpaceUsedOperationCompleted);
            }
            this.InvokeAsync("GetPortalSpaceUsed", new object[] {
                        showQuota}, this.GetPortalSpaceUsedOperationCompleted, userState);
        }
        
        private void OnGetPortalSpaceUsedOperationCompleted(object arg) {
            if ((this.GetPortalSpaceUsedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortalSpaceUsedCompleted(this, new GetPortalSpaceUsedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/UploadFileAjax", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFileAjax(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes) {
            object[] results = this.Invoke("UploadFileAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        folderId,
                        fileName,
                        bytes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId, string fileName, byte[] bytes) {
            this.UploadFileAjaxAsync(portalid, userId, username, password, moduleId, webPageCall, encrypted, folderId, fileName, bytes, null);
        }
        
        /// <remarks/>
        public void UploadFileAjaxAsync(int portalid, int userId, string username, string password, int moduleId, bool webPageCall, bool encrypted, int folderId, string fileName, byte[] bytes, object userState) {
            if ((this.UploadFileAjaxOperationCompleted == null)) {
                this.UploadFileAjaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileAjaxOperationCompleted);
            }
            this.InvokeAsync("UploadFileAjax", new object[] {
                        portalid,
                        userId,
                        username,
                        password,
                        moduleId,
                        webPageCall,
                        encrypted,
                        folderId,
                        fileName,
                        bytes}, this.UploadFileAjaxOperationCompleted, userState);
        }
        
        private void OnUploadFileAjaxOperationCompleted(object arg) {
            if ((this.UploadFileAjaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileAjaxCompleted(this, new UploadFileAjaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/UploadFile", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFile(int folderId, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        folderId,
                        fileName,
                        bytes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(int folderId, string fileName, byte[] bytes) {
            this.UploadFileAsync(folderId, fileName, bytes, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(int folderId, string fileName, byte[] bytes, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        folderId,
                        fileName,
                        bytes}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetVersion", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersion() {
            object[] results = this.Invoke("GetVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionAsync(object userState) {
            if ((this.GetVersionOperationCompleted == null)) {
                this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionOperationCompleted);
            }
            this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
        }
        
        private void OnGetVersionOperationCompleted(object arg) {
            if ((this.GetVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/EncryptData", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptData(string UnEncryptedData, string Key) {
            object[] results = this.Invoke("EncryptData", new object[] {
                        UnEncryptedData,
                        Key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptDataAsync(string UnEncryptedData, string Key) {
            this.EncryptDataAsync(UnEncryptedData, Key, null);
        }
        
        /// <remarks/>
        public void EncryptDataAsync(string UnEncryptedData, string Key, object userState) {
            if ((this.EncryptDataOperationCompleted == null)) {
                this.EncryptDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptDataOperationCompleted);
            }
            this.InvokeAsync("EncryptData", new object[] {
                        UnEncryptedData,
                        Key}, this.EncryptDataOperationCompleted, userState);
        }
        
        private void OnEncryptDataOperationCompleted(object arg) {
            if ((this.EncryptDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptDataCompleted(this, new EncryptDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/UnEncryptData", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UnEncryptData(string EncryptedData, string Key) {
            object[] results = this.Invoke("UnEncryptData", new object[] {
                        EncryptedData,
                        Key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnEncryptDataAsync(string EncryptedData, string Key) {
            this.UnEncryptDataAsync(EncryptedData, Key, null);
        }
        
        /// <remarks/>
        public void UnEncryptDataAsync(string EncryptedData, string Key, object userState) {
            if ((this.UnEncryptDataOperationCompleted == null)) {
                this.UnEncryptDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnEncryptDataOperationCompleted);
            }
            this.InvokeAsync("UnEncryptData", new object[] {
                        EncryptedData,
                        Key}, this.UnEncryptDataOperationCompleted, userState);
        }
        
        private void OnUnEncryptDataOperationCompleted(object arg) {
            if ((this.UnEncryptDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnEncryptDataCompleted(this, new UnEncryptDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/GetUser", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserInfo GetUser(string Username) {
            object[] results = this.Invoke("GetUser", new object[] {
                        Username});
            return ((UserInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAsync(string Username) {
            this.GetUserAsync(Username, null);
        }
        
        /// <remarks/>
        public void GetUserAsync(string Username, object userState) {
            if ((this.GetUserOperationCompleted == null)) {
                this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOperationCompleted);
            }
            this.InvokeAsync("GetUser", new object[] {
                        Username}, this.GetUserOperationCompleted, userState);
        }
        
        private void OnGetUserOperationCompleted(object arg) {
            if ((this.GetUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/CreateUser", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateUser(string NewUsername, string FirstName, string LastName, string DisplayName, string email, string Newpassword) {
            object[] results = this.Invoke("CreateUser", new object[] {
                        NewUsername,
                        FirstName,
                        LastName,
                        DisplayName,
                        email,
                        Newpassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUserAsync(string NewUsername, string FirstName, string LastName, string DisplayName, string email, string Newpassword) {
            this.CreateUserAsync(NewUsername, FirstName, LastName, DisplayName, email, Newpassword, null);
        }
        
        /// <remarks/>
        public void CreateUserAsync(string NewUsername, string FirstName, string LastName, string DisplayName, string email, string Newpassword, object userState) {
            if ((this.CreateUserOperationCompleted == null)) {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        NewUsername,
                        FirstName,
                        LastName,
                        DisplayName,
                        email,
                        Newpassword}, this.CreateUserOperationCompleted, userState);
        }
        
        private void OnCreateUserOperationCompleted(object arg) {
            if ((this.CreateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("IWebAuthendicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.DotNetNuke.com/PortalsOnServer", RequestNamespace="http://webservices.DotNetNuke.com/", ResponseNamespace="http://webservices.DotNetNuke.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PortalsOnServer() {
            object[] results = this.Invoke("PortalsOnServer", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PortalsOnServerAsync() {
            this.PortalsOnServerAsync(null);
        }
        
        /// <remarks/>
        public void PortalsOnServerAsync(object userState) {
            if ((this.PortalsOnServerOperationCompleted == null)) {
                this.PortalsOnServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPortalsOnServerOperationCompleted);
            }
            this.InvokeAsync("PortalsOnServer", new object[0], this.PortalsOnServerOperationCompleted, userState);
        }
        
        private void OnPortalsOnServerOperationCompleted(object arg) {
            if ((this.PortalsOnServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PortalsOnServerCompleted(this, new PortalsOnServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.DotNetNuke.com/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://webservices.DotNetNuke.com/", IsNullable=false)]
    public partial class IWebAuthendicationHeader : System.Web.Services.Protocols.SoapHeader {
        
        private int portalIDField;
        
        private int userIDField;
        
        private string usernameField;
        
        private string passwordField;
        
        private string encryptedField;
        
        private string webPageCallField;
        
        private int moduleIdField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public int PortalID {
            get {
                return this.portalIDField;
            }
            set {
                this.portalIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Encrypted {
            get {
                return this.encryptedField;
            }
            set {
                this.encryptedField = value;
            }
        }
        
        /// <remarks/>
        public string WebPageCall {
            get {
                return this.webPageCallField;
            }
            set {
                this.webPageCallField = value;
            }
        }
        
        /// <remarks/>
        public int ModuleId {
            get {
                return this.moduleIdField;
            }
            set {
                this.moduleIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.DotNetNuke.com/")]
    public partial class UserProfile {
        
        private string cellField;
        
        private string cityField;
        
        private string countryField;
        
        private string faxField;
        
        private string firstNameField;
        
        private string imField;
        
        private string lastNameField;
        
        private string postalCodeField;
        
        private string preferredLocaleField;
        
        private ProfilePropertyDefinition[] profilePropertiesField;
        
        private string regionField;
        
        private string streetField;
        
        private string telephoneField;
        
        private int timeZoneField;
        
        private string unitField;
        
        private string websiteField;
        
        /// <remarks/>
        public string Cell {
            get {
                return this.cellField;
            }
            set {
                this.cellField = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string Fax {
            get {
                return this.faxField;
            }
            set {
                this.faxField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string IM {
            get {
                return this.imField;
            }
            set {
                this.imField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        public string PreferredLocale {
            get {
                return this.preferredLocaleField;
            }
            set {
                this.preferredLocaleField = value;
            }
        }
        
        /// <remarks/>
        public ProfilePropertyDefinition[] ProfileProperties {
            get {
                return this.profilePropertiesField;
            }
            set {
                this.profilePropertiesField = value;
            }
        }
        
        /// <remarks/>
        public string Region {
            get {
                return this.regionField;
            }
            set {
                this.regionField = value;
            }
        }
        
        /// <remarks/>
        public string Street {
            get {
                return this.streetField;
            }
            set {
                this.streetField = value;
            }
        }
        
        /// <remarks/>
        public string Telephone {
            get {
                return this.telephoneField;
            }
            set {
                this.telephoneField = value;
            }
        }
        
        /// <remarks/>
        public int TimeZone {
            get {
                return this.timeZoneField;
            }
            set {
                this.timeZoneField = value;
            }
        }
        
        /// <remarks/>
        public string Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        public string Website {
            get {
                return this.websiteField;
            }
            set {
                this.websiteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.DotNetNuke.com/")]
    public partial class ProfilePropertyDefinition : BaseEntityInfo {
        
        private int lengthField;
        
        private string propertycategoryField;
        
        private string propertynameField;
        
        /// <remarks/>
        public int length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        /// <remarks/>
        public string propertycategory {
            get {
                return this.propertycategoryField;
            }
            set {
                this.propertycategoryField = value;
            }
        }
        
        /// <remarks/>
        public string propertyname {
            get {
                return this.propertynameField;
            }
            set {
                this.propertynameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProfilePropertyDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.DotNetNuke.com/")]
    public abstract partial class BaseEntityInfo {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.DotNetNuke.com/")]
    public partial class UserInfo : BaseEntityInfo {
        
        private int affiliateIDField;
        
        private string displayNameField;
        
        private string emailField;
        
        private string firstNameField;
        
        private bool isDeletedField;
        
        private bool isSuperUserField;
        
        private string lastIPAddressField;
        
        private string lastNameField;
        
        private UserMembership membershipField;
        
        private int portalIDField;
        
        private UserProfile profileField;
        
        private bool refreshRolesField;
        
        private string[] rolesField;
        
        private int userIDField;
        
        private string usernameField;
        
        /// <remarks/>
        public int AffiliateID {
            get {
                return this.affiliateIDField;
            }
            set {
                this.affiliateIDField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSuperUser {
            get {
                return this.isSuperUserField;
            }
            set {
                this.isSuperUserField = value;
            }
        }
        
        /// <remarks/>
        public string LastIPAddress {
            get {
                return this.lastIPAddressField;
            }
            set {
                this.lastIPAddressField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public UserMembership Membership {
            get {
                return this.membershipField;
            }
            set {
                this.membershipField = value;
            }
        }
        
        /// <remarks/>
        public int PortalID {
            get {
                return this.portalIDField;
            }
            set {
                this.portalIDField = value;
            }
        }
        
        /// <remarks/>
        public UserProfile Profile {
            get {
                return this.profileField;
            }
            set {
                this.profileField = value;
            }
        }
        
        /// <remarks/>
        public bool RefreshRoles {
            get {
                return this.refreshRolesField;
            }
            set {
                this.refreshRolesField = value;
            }
        }
        
        /// <remarks/>
        public string[] Roles {
            get {
                return this.rolesField;
            }
            set {
                this.rolesField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.DotNetNuke.com/")]
    public partial class UserMembership {
        
        private bool approvedField;
        
        private System.DateTime createdDateField;
        
        private bool isOnLineField;
        
        private System.DateTime lastActivityDateField;
        
        private System.DateTime lastLockoutDateField;
        
        private System.DateTime lastLoginDateField;
        
        private System.DateTime lastPasswordChangeDateField;
        
        private bool lockedOutField;
        
        private string passwordField;
        
        private string passwordAnswerField;
        
        private string passwordQuestionField;
        
        private bool updatePasswordField;
        
        /// <remarks/>
        public bool Approved {
            get {
                return this.approvedField;
            }
            set {
                this.approvedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsOnLine {
            get {
                return this.isOnLineField;
            }
            set {
                this.isOnLineField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastActivityDate {
            get {
                return this.lastActivityDateField;
            }
            set {
                this.lastActivityDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastLockoutDate {
            get {
                return this.lastLockoutDateField;
            }
            set {
                this.lastLockoutDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastLoginDate {
            get {
                return this.lastLoginDateField;
            }
            set {
                this.lastLoginDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastPasswordChangeDate {
            get {
                return this.lastPasswordChangeDateField;
            }
            set {
                this.lastPasswordChangeDateField = value;
            }
        }
        
        /// <remarks/>
        public bool LockedOut {
            get {
                return this.lockedOutField;
            }
            set {
                this.lockedOutField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string PasswordAnswer {
            get {
                return this.passwordAnswerField;
            }
            set {
                this.passwordAnswerField = value;
            }
        }
        
        /// <remarks/>
        public string PasswordQuestion {
            get {
                return this.passwordQuestionField;
            }
            set {
                this.passwordQuestionField = value;
            }
        }
        
        /// <remarks/>
        public bool UpdatePassword {
            get {
                return this.updatePasswordField;
            }
            set {
                this.updatePasswordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.DotNetNuke.com/")]
    public partial class IWebFolderInfo {
        
        private int folderIdField;
        
        private string folderNameField;
        
        /// <remarks/>
        public int FolderId {
            get {
                return this.folderIdField;
            }
            set {
                this.folderIdField = value;
            }
        }
        
        /// <remarks/>
        public string FolderName {
            get {
                return this.folderNameField;
            }
            set {
                this.folderNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.DotNetNuke.com/")]
    public partial class IWebFileInfo {
        
        private string contentTypeField;
        
        private string extensionField;
        
        private System.DateTime lastModifiedField;
        
        private int fileIdField;
        
        private string fileNameField;
        
        private int folderIdField;
        
        private int heightField;
        
        private int sizeField;
        
        private int widthField;
        
        /// <remarks/>
        public string ContentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastModified {
            get {
                return this.lastModifiedField;
            }
            set {
                this.lastModifiedField = value;
            }
        }
        
        /// <remarks/>
        public int FileId {
            get {
                return this.fileIdField;
            }
            set {
                this.fileIdField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public int FolderId {
            get {
                return this.folderIdField;
            }
            set {
                this.folderIdField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks/>
        public int Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        public int Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AddFolderAjaxCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AddFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CopyFileAjaxCompletedEventHandler(object sender, CopyFileAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyFileAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyFileAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CopyFileCompletedEventHandler(object sender, CopyFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DefaultProtectedFoldersAjaxCompletedEventHandler(object sender, DefaultProtectedFoldersAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DefaultProtectedFoldersAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DefaultProtectedFoldersAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DefaultProtectedFoldersCompletedEventHandler(object sender, DefaultProtectedFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DefaultProtectedFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DefaultProtectedFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DeleteFilesAjaxCompletedEventHandler(object sender, DeleteFilesAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFilesAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFilesAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DeleteFilesCompletedEventHandler(object sender, DeleteFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DownloadFileAjaxCompletedEventHandler(object sender, DownloadFileAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DownloadFileCompletedEventHandler(object sender, DownloadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetFilesByFolderAjaxCompletedEventHandler(object sender, GetFilesByFolderAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesByFolderAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesByFolderAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFileInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFileInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetFilesByFolderCompletedEventHandler(object sender, GetFilesByFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesByFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesByFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFileInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFileInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetFileByIdAjaxCompletedEventHandler(object sender, GetFileByIdAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileByIdAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileByIdAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetFileByIdCompletedEventHandler(object sender, GetFileByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetFoldersByParentAjaxCompletedEventHandler(object sender, GetFoldersByParentAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersByParentAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoldersByParentAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFolderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFolderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetFoldersByParentCompletedEventHandler(object sender, GetFoldersByParentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersByParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoldersByParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFolderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFolderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetFolderByIdAjaxCompletedEventHandler(object sender, GetFolderByIdAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderByIdAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderByIdAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFolderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFolderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetFolderByIdCompletedEventHandler(object sender, GetFolderByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFolderInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFolderInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetMaxRequestLengthAjaxCompletedEventHandler(object sender, GetMaxRequestLengthAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxRequestLengthAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxRequestLengthAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetMaxRequestLengthCompletedEventHandler(object sender, GetMaxRequestLengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxRequestLengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxRequestLengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPortalRootFoldersAjaxCompletedEventHandler(object sender, GetPortalRootFoldersAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortalRootFoldersAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortalRootFoldersAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFolderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFolderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPortalRootFoldersCompletedEventHandler(object sender, GetPortalRootFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortalRootFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortalRootFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IWebFolderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IWebFolderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPortalSpaceUsedAjaxCompletedEventHandler(object sender, GetPortalSpaceUsedAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortalSpaceUsedAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortalSpaceUsedAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPortalSpaceUsedCompletedEventHandler(object sender, GetPortalSpaceUsedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortalSpaceUsedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortalSpaceUsedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UploadFileAjaxCompletedEventHandler(object sender, UploadFileAjaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileAjaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileAjaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void EncryptDataCompletedEventHandler(object sender, EncryptDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UnEncryptDataCompletedEventHandler(object sender, UnEncryptDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnEncryptDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnEncryptDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PortalsOnServerCompletedEventHandler(object sender, PortalsOnServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PortalsOnServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PortalsOnServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591